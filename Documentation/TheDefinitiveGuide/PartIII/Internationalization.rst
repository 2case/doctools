=============================================
Internationalization & Localization Framework
=============================================

Internationalization is the process of designing software so that it
can be easily (i.e. without any source code modifications) adapted to
various languages and regions. Localization is the process of adapting
internationalized software for a specific language or region (e.g. by
translating text, formating date or time).

We describe here functionality and usage of FLOW3 <code>I18n</code>
package.

Basics
======

Locale class
------------

Instances of ``\TYPO3\FLOW3\I18n\Locale`` class are fundamental for whole i18n and L10n
functionality. They are used to specify what language should be used for translation, how
date and time should be formatted, and so on. They can be treated as simple wrappers for
locale identifiers (like *de* or *pl_PL*). Many methods from the I18n framework accept
Locale objects as a optional parameter - if not provided, the default ``Locale`` instance
for particular FLOW3 installation will be used.

You can create a ``Locale`` object for any valid locale identifier (specified by RFC
4646), even if it is not explicitly meant to be supported by current FLOW3 installation
(i.e. there are no localized resources for this locale). This can be useful, because FLOW3
uses the *CLDR* (Common Locale Data Repository), so each FLOW3 installation knows how to
localize numbers, date, time and so on to almost any language and region on the world.

Additionally FLOW3 creates a special collection of ``Locale`` objects. They are
automatically generated by scanning the filesystem for any localized resources. You can
use the ``Service`` API to obtain these verified ``Locale`` objects.

These locales are organized in hierarchy. For example, *en* is a parent of *en_US* which
is a parent of *en_US_POSIX*. Thanks to the hierarchical relation resources can be
automatically shared between related resources. For example, when you request *foobar*
file for *en_US* locale, but it does not exist, and same file for *en* locale does exist,
it will be used.

Service
-------

``Service`` is a singleton instance of ``\TYPO3\FLOW3\I18n\Service`` class automatically
created during the initialization of FLOW3 Framework. It generates a list of available
locales (mentioned earlier), and provides simple API for accessing these. You can call
``findBestMatchingLocale()`` method in order to obtain one of available locales which most
similar to the one provided as parameter. It can return identical locale of course, but
now you are ensured that it is supported by current FLOW3 installation.

``Service`` also stores a special ``Locale`` object - the default locale. It's
instantiated during the initialization and represents locale identifier defined in the
configuration. You can access this object by ``getDefaultLocale()`` method.

``Service`` also has a helper method for accessing localized resources:
``getLocalizedFilename()``. You need to provide a filename (path) of base (not localized)
file, ``Locale`` object, and it will return a filename (path) to best matching localized
version of the file.

Detecting user's locale
-----------------------

The ``Detector`` class can be used for matching one of available locales with locales
accepted by the user. For example, you can provide the *AcceptLanguage* HTTP header to
``detectLocaleFromHttpHeader()`` method, which will analyze the header and return best
matching ``Locale`` object. Also convenient methods exist which accept locale identifier
or template ``Locale`` object as a parameter (this is what ``Service`` uses actually).

Resources
---------

Resources can be localized easily in FLOW3. The only thing you need to do is to put a
locale identifier just before the extension. For example, *foobar.png* can be localized as
*foobar.en.png*, *foobar.de_DE.png*, and so on. This works with any resource type. Just
use the ``Service`` to obtain localized resource name, and the FLOW3 Resource Framework to
work with the resource itself.

Common Locale Data Repository
-----------------------------

FLOW3 comes bundled with CLDR (*Common Locale Data Repository*). It's an Unicode project
with aim to provide systematic representation of data used for localization process (like
formatting numbers or date and time). It supports big number of languages and regions of
the world.

The I18n framework reads this data and provides convenient API on top of it, so you don't
need to know much about the inners of CLDR.

  For now FLOW3 covers only subset of CLDR data. For example,
  only Gregorian calendar is supported for date and time formatting or
  parsing. You can get a grasp of what is available by reading sections
  below.


Translating text
================

Translator class
----------------

The ``\TYPO3\FLOW3\I18n\Translator`` class is the central place for whole
translation-related functionality.

First of all, one of two translation modes can be used: translating by original label, or
by ID:

* ``translateByOriginalLabel()``

  * In this mode you need to provide original (untranslated, source) message, and it's
    used as a key for searching the translated message. It makes view templates more
    readable.

* ``translateById()``

  * In this mode you provide systematic ID (like *user.notRegistered*) and it's used as a
    key.

Both methods accept following arguments (they are optional):

* ``sourceName`` - relative name of source catalog to read translation from
   This value is interpreted by ``Translation Provider``
* ``arguments`` - array of values which will replace corresponding placeholders
* ``quantity`` - integer or decimal number used for defining plural form
* ``locale`` - specifies target language of translation

``Translator`` uses the ``Translation Provider`` for doing actual translation. Not every
``Translation Provider`` has to support both translation modes. So it solely depends on
the ``Translation Provider`` configured for your installation which modes you can use.

``Translator`` also supports plural forms, and placeholders. Following sections describe
in detail these features.


Translation Providers
---------------------

The ``Translation Provider`` is a class implementing
``\TYPO3\FLOW3\I18n\TranslationProvider\TranslationProviderInterface``. It is used by the
``Translator`` class for accessing actual data from translation files (catalogs).

``Translation Provider``'s task is to read (understand) concrete format of catalogs. FLOW3
comes with one ``Translation Providers`` by default:
``\TYPO3\FLOW3\I18n\TranslationProvider\XliffTranslationProvider``. It stores translations
in *XLIFF* format, supports plural forms, and both translation modes.

*XLIFF* can be edited by dedicated editors, like *Virtaal*. It also can be easily
converted to *PO* file format, edited by well known *PO* editors (like *Poedit*, which
supports plural forms), and converted back to *XLIFF* format.

You can create and use your own ``Translation Provider`` which reads file format you need,
like *PO*, *YAML* or even *PHP* arrays. Just implement the interface mentioned earlier and
use FLOW3 *Objects.yaml* configuration file to set your ``Translation Provider`` to be
injected into the ``Translator``.


Plural forms
------------

``Translator`` supports plural forms. English has only two plural forms: *singular* and
*plurals*. *CLDR* defines six plural forms: *zero*, *one*, *two*, *few*, *many*, *other*.
English uses *one* and *other*, but different languages use more forms (like *one*, *few*,
and *other* for Polish) or less forms (like *other* for Japanese).

Sets of rules exist for every language defining which plural form should be used for
particular quantity of noun. If no rules match, the implicit *other* rule is assumed. This
is the only form existing in every language.

If the catalogs with translated messages defines different translations for particular
plural forms, correct form can be obtained by the ``Translator`` class. You just need to
provide ``quantity`` parameter - an integer or decimal number which specifies the quantity
of noun in a sentence being translated.


Placeholders
------------

Translated messages (labels) can contain placeholders - special markers denoting place
where to insert particular value, and manner how to format it.

Syntax of placeholders is very simple:

 ``{id[,name[,attribute1[,attribute2...]]]}``

where:

* *id* is an index of argument to insert in place of placeholder.
* *formatter* (optional) is a name of ``Formatter`` to use for formatting the
  argument (if no name is given, provided argument will be just string-casted)
* *attributes* (optional) are strings directly passed to the ``Formatter``. What they do
  depends on concrete ``Formatter`` which is being used, but generally they are used to
  specify formatting more precisely.

Placeholders' syntax examples
-----------------------------

.. code-block:: none

  {0}
  {0,number,decimal}
  {1,datetime,time,full}

The first example would output first argument (indexing starts with 0), simply
string-casted. The second example would use ``NumberFormatter`` (which would receive one
attribute: *decimal*) to format first argument. Finally, the third example would output
the second argument formatted by ``DatetimeFormatter``, which would receive two
attributes: *time* and *full* (they stand for format *type* and *length*, accordingly).


Formatters
----------

``Formatter`` is a class implementing ``\TYPO3\FLOW3\I18n\Formatter\FormatterInterface``.
Formatter can be used to format a value of particular type, i.e. to convert it to string
in locale-aware manner.

For example, number 1234.567 would be formatted for French locale as 1 234,567. Although
it is possible to define more elements than just position and symbols of separators.

Together with placeholders, formatters provide robust and easy way to place formatted
values in strings. But formatters can be used directly (i.e. not in placeholder, but in
your class by injection), providing you more control over the results of formatting.

Following formatters are available in FLOW3 by default:

* ``\TYPO3\FLOW3\I18n\Formatter\NumberFormatter``

  * Formats integers or floats in order to display them as strings in localized manner.
    Uses patterns obtained from CLDR for specified locale (pattern defines such elements
    like minimal and maximal size of decimal part, symbol for decimal and group separator,
    etc.). You can indirectly define a pattern by providing format type (first additional
    attribute in placeholder) as *decimal* or *percent*. You can also manually set the
    pattern if you use this class directly (i.e. not in placeholder, but in your class by
    injection).

* ``\TYPO3\FLOW3\I18n\Formatter\DatetimeFormatter``

  * Formats date and / or time part of PHP ``\DateTime`` object. Supports most of very
    extensive pattern syntax from CLDR. Has three format types: *date*, *time*, and
    *datetime*. You can also manually set the pattern if you use this class directly.

Following parameters are generally accepted by Formatters' methods:

* ``locale`` - formatting result depends on the localization, which is defined by provided
  ``Locale`` object
* ``formatLength`` (optional) - CLDR provides different formats for *full*, *long*,
  *medium*, *short*, and *default* length

Every formatter provides few methods, one for each format type. For example,
``NumberFormatter`` has methods ``formatDecimalNumber()`` - for formatting decimals and
integers - and ``formatPercentNumber()`` - for percentage (parsed value is automatically
multiplied by 100).

You can create your own ``Formatter`` class which will be automatically available for use
in placeholders. Just make sure your class implements
``\TYPO3\FLOW3\I18n\Formatter\FormatterInterface``, is placed in
``\TYPO3\FLOW3\I18n\Formatter\`` namespace and is named with the *Formatter* suffix.


Fluid Viewhelper
----------------

There is a ``Translate`` Viewhelper for Fluid. It covers all ``Translator``'s features,
i.e. it supports translation modes, plural forms, and placeholders.

In its simplest case, ``Translate`` Viewhelper can be used like this:

.. code-block:: xml

  <f:translate>Untranslated label</f:translate>

It will output translation of "*Untranslated label*".

The ``Translate`` Viewhelper also accepts all optional parameters the ``Translator`` does.

.. code-block:: xml

  <f:translate source="someLabelsCatalog" locale="de_DE" arguments="{0: 'foo', 1: '99.9'}>Untranslated {0} and {1,number}</f:translate>

It will translate the label, using *someLabelsCatalog* for German language, and then it
will insert string casted value "*foo*" in place of *{0}* and localized number *99.9* in
place of *{1,number}*.

Translation by ID can also be done:

.. code-block:: xml

  <f:translate key="user.unregistered">Unregistered User</f:translate>

It will output the translation assigned to *user.unregistered* key.

When the translation for particular message or ID is not found, value placed between
``<f:translate>`` and ``</f:translate>`` tags will be displayed.


Validating and parsing input
============================

Validators
----------

Validator is a class implementing ``\TYPO3\FLOW3\Validation\Validator\ValidatorInterface``
and is used by the FLOW3 Validation Framework for assuring correctness of user's input.
FLOW3 provides few validators that utilize i18n functionality:

* ``\TYPO3\FLOW3\Validation\Validator\NumberValidator``

  * Validates decimal and integer numbers provided as strings (e.g. from user's input).
    Accepts following options: *locale*, *strictMode*, *formatType*, *formatLength*.

* ``\TYPO3\FLOW3\Validation\Validator\DateTimeValidator``

  * Validates date, time, or both date and time provided as strings. Accepts following
    options: *locale*, *strictMode*, *formatType*, *formatLength*.

Validators are working on top of parsers API. Please refer to parsers' documentation for
details about functionality and accepted options.


Parsers
-------

Parsers' task is to read user's input of particular type (e.g. number, date, time), with
respect to the localization she / he uses, and return it in a form that can be further
processed. There are following parsers available in FLOW3:

* ``\TYPO3\FLOW3\I18n\Parser\NumberParser``

  * Accepts string with integer or decimal number and converts it to float.

* ``\TYPO3\FLOW3\I18n\Parser\DatetimeParser``

  * Accepts string with date, time or both date and time and returns array with date /
    time elements (like day, hour, timezone, etc.) which were successfully recognized.

The following parameters are generally accepted by parsers' methods:

* *locale* - formatting result depends on the localization, which is defined by provided
  ``Locale`` object
* *formatLength* - CLDR provides different formats for *full*, *long*, *medium*, *short*,
  and *default* length
* *strictMode* - whether to work in *strict* or *lenient* mode

Parsers are very complement to formatters. Every parser provides few methods, one for each
format type. Additionally each parser has a method which accepts custom format (pattern).
You can provide your own pattern and it will be used for matching input. The syntax of
patterns depends on particular parser and is same for corresponding formatter (e.g.
``NumberParser`` and ``NumberFormatter`` support same pattern syntax).

Parser can work in two modes: *strict* and *lenient*. In *strict* mode, parsed value has
to conform the pattern exactly (even literals are important). In *lenient* mode, pattern
is only a "base". Everything that can be ignored is ignored. Some simplifications in the
pattern are done. Parser tries to do it's best to read the value.
